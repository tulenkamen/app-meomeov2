import React, { useEffect, useState, useCallback } from 'react';
import { View, Text, TouchableOpacity, Alert, FlatList, Button, StyleSheet } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import messaging from '@react-native-firebase/messaging';
import { useNavigation } from '@react-navigation/native';
import styles from './NotiStyle';

const formatDate = (timestamp) => {
    const date = new Date(timestamp);
    return date.toLocaleString('vi-VN', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
    });
};

const NotiScreen = ({ route }) => {
    const { phone } = route.params;
    const navigation = useNavigation();
    const [notifications, setNotifications] = useState([]);

    const loadNotifications = useCallback(async () => {
        const storedNotifications = JSON.parse(await AsyncStorage.getItem('notifications')) || [];
        setNotifications(storedNotifications);
    }, []);

    useEffect(() => {
        loadNotifications();

        const unsubscribeOnMessage = messaging().onMessage(async remoteMessage => {
            console.log('Đã nhận thông báo trong ứng dụng:', remoteMessage);
            if (remoteMessage.notification && remoteMessage.notification.body) {
                const newNotification = {
                    id: Date.now().toString(),
                    title: remoteMessage.notification.title,
                    content: remoteMessage.notification.body,
                    date: Date.now(),
                    isRead: false,
                };
                await saveNotification(newNotification);
                loadNotifications();
                Alert.alert(
                    'Cảnh báo',
                    'Các chỉ số đang vượt mức cảnh báo, chuyển tới màn hình quan trắc?',
                    [
                        { text: 'OK', onPress: () => navigation.navigate('Quan Trắc') },
                        { text: 'Để sau', style: 'cancel' },
                    ],
                    { cancelable: false }
                );
            }
        });

        return () => {
            unsubscribeOnMessage();
        };
    }, [loadNotifications, navigation]);

    const saveNotification = async (notification) => {
        let notifications = JSON.parse(await AsyncStorage.getItem('notifications')) || [];
        notifications.push(notification);
        notifications.sort((a, b) => b.date - a.date);
        if (notifications.length > 50) {
            notifications = notifications.slice(0, 50);
        }

        await AsyncStorage.setItem('notifications', JSON.stringify(notifications));
    };

    const markAsRead = useCallback(async (id) => {
        const updatedNotifications = notifications.map(notification =>
            notification.id === id ? { ...notification, isRead: true } : notification
        );
        setNotifications(updatedNotifications);
        await AsyncStorage.setItem('notifications', JSON.stringify(updatedNotifications));
    }, [notifications]);

    const deleteNotification = useCallback((id) => {
        Alert.alert(
            'Xác nhận',
            'Bạn có chắc chắn muốn xóa thông báo này?',
            [
                {
                    text: 'OK',
                    onPress: async () => {
                        const updatedNotifications = notifications.filter(notification => notification.id !== id);
                        setNotifications(updatedNotifications);
                        await AsyncStorage.setItem('notifications', JSON.stringify(updatedNotifications));
                        Alert.alert('Thông báo', 'Đã xóa thông báo.');
                    },
                },
                { text: 'Hủy', style: 'cancel' },

            ],
            { cancelable: false }
        );
    }, [notifications]);

    const markAllAsRead = useCallback(async () => {
        const updatedNotifications = notifications.map(notification => ({ ...notification, isRead: true }));
        setNotifications(updatedNotifications);
        await AsyncStorage.setItem('notifications', JSON.stringify(updatedNotifications));
    }, [notifications]);

    const deleteAll = async () => {
        Alert.alert(
            'Xác nhận',
            'Bạn có chắc chắn muốn xóa tất cả thông báo?',
            [
                {
                    text: 'OK',
                    onPress: async () => {
                        await AsyncStorage.removeItem('notifications');
                        setNotifications([]);
                        Alert.alert('Thông báo', 'Đã xóa tất cả thông báo.');
                    },
                },
                { text: 'Hủy', style: 'cancel' },

            ],
            { cancelable: false }
        );
    };

    const renderItem = ({ item }) => (
        <TouchableOpacity onPress={() => markAsRead(item.id)} style={styles.notificationItem}>
            <View style={styles.notificationHeader}>
                <Text style={[styles.notificationTitle, { fontWeight: item.isRead ? 'normal' : 'bold' }]}>{item.title}</Text>
                {!item.isRead && <View style={styles.unreadIndicator} />}
                <Text style={[styles.notificationDate, { fontWeight: item.isRead ? 'normal' : 'bold' }]}>{formatDate(item.date)}</Text>
            </View>
            <View style={styles.separator} />
            <Text>{item.content}</Text>
            <TouchableOpacity onPress={() => deleteNotification(item.id)} style={styles.deleteButton}>
                <Text style={styles.deleteButtonText}>Xóa</Text>
            </TouchableOpacity>
        </TouchableOpacity>
    );

    return (
        <View style={styles.container}>
            <TouchableOpacity onPress={markAllAsRead} style={styles.nextButton}>
                <Text style={styles.nextText}>Đã đọc tất cả</Text>
            </TouchableOpacity>
            <TouchableOpacity onPress={deleteAll} style={styles.lastButton}>
                <Text style={styles.successText}>Xóa tất cả</Text>
            </TouchableOpacity>
            <FlatList
                data={notifications}
                renderItem={renderItem}
                keyExtractor={item => item.id}
                contentContainerStyle={styles.flatListContent}
            />
        </View>
    );
};


export default NotiScreen;